<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Autofac.Integration.Mvc</name>
    </assembly>
    <members>
        <member name="T:Autofac.Integration.Mvc.AutofacDependencyResolver">
            <summary>
            Autofac implementation of the <see cref="T:System.Web.Mvc.IDependencyResolver"/> interface.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Mvc.AutofacDependencyResolver.#ctor(Autofac.ILifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Integration.Mvc.AutofacDependencyResolver"/> class.
            </summary>
            <param name="container">The container that nested lifetime scopes will be create from.</param>
        </member>
        <member name="M:Autofac.Integration.Mvc.AutofacDependencyResolver.#ctor(Autofac.ILifetimeScope,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Integration.Mvc.AutofacDependencyResolver"/> class.
            </summary>
            <param name="container">The container that nested lifetime scopes will be create from.</param>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/>
            that adds component registations visible only in nested lifetime scopes.</param>
        </member>
        <member name="M:Autofac.Integration.Mvc.AutofacDependencyResolver.#ctor(Autofac.ILifetimeScope,Autofac.Integration.Mvc.ILifetimeScopeProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Integration.Mvc.AutofacDependencyResolver"/> class.
            </summary>
            <param name="container">The container that nested lifetime scopes will be create from.</param>
            <param name="lifetimeScopeProvider">A <see cref="T:Autofac.Integration.Mvc.ILifetimeScopeProvider"/> implementation for 
            creating new lifetime scopes.</param>
        </member>
        <member name="M:Autofac.Integration.Mvc.AutofacDependencyResolver.#ctor(Autofac.ILifetimeScope,Autofac.Integration.Mvc.ILifetimeScopeProvider,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Integration.Mvc.AutofacDependencyResolver"/> class.
            </summary>
            <param name="container">The container that nested lifetime scopes will be create from.</param>
            <param name="lifetimeScopeProvider">A <see cref="T:Autofac.Integration.Mvc.ILifetimeScopeProvider"/> implementation for 
            creating new lifetime scopes.</param>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/>
            that adds component registations visible only in nested lifetime scopes.</param>
        </member>
        <member name="M:Autofac.Integration.Mvc.AutofacDependencyResolver.GetService(System.Type)">
            <summary>
            Get a single instance of a service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>The single instance if resolved; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.AutofacDependencyResolver.GetServices(System.Type)">
            <summary>
            Gets all available instances of a services.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>The list of instances if any were resolved; otherwise, an empty list.</returns>
        </member>
        <member name="P:Autofac.Integration.Mvc.AutofacDependencyResolver.Current">
            <summary>
            Gets the Autofac implementation of the dependency resolver.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.AutofacDependencyResolver.RequestLifetimeScope">
            <summary>
            The lifetime containing components for processing the current HTTP request.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.AutofacDependencyResolver.ApplicationContainer">
            <summary>
            Gets the application container that was provided to the constructor.
            </summary>
        </member>
        <member name="T:Autofac.Integration.Mvc.AutofacFilterProvider">
            <summary>
            Defines a filter provider for filter attributes that performs property injection.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Mvc.AutofacFilterProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Integration.Mvc.AutofacFilterProvider"/> class.
            </summary>
            <remarks>
            The <c>false</c> constructor parameter passed to base here ensures that attribute instances are not cached.
            </remarks>
        </member>
        <member name="M:Autofac.Integration.Mvc.AutofacFilterProvider.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
            <summary>
            Aggregates the filters from all of the filter providers into one collection.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="actionDescriptor">The action descriptor.</param>
            <returns>
            The collection filters from all of the filter providers with properties injected.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="controllerContext"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Autofac.Integration.Mvc.AutofacModelBinderProvider">
            <summary>
            Autofac implementation of the <see cref="T:System.Web.Mvc.IModelBinderProvider"/> interface.
            </summary>
        </member>
        <member name="F:Autofac.Integration.Mvc.AutofacModelBinderProvider.MetadataKey">
            <summary>
            Metadata key for the supported model types.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Mvc.AutofacModelBinderProvider.GetBinder(System.Type)">
            <summary>
            Gets the model binder associated with the provided model type.
            </summary>
            <param name="modelType">Type of the model.</param>
            <returns>An <see cref="T:System.Web.Mvc.IModelBinder"/> instance if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:Autofac.Integration.Mvc.AutofacWebTypesModule">
            <summary>
            Dependency injection module that registers abstractions for common
            web application properties.
            </summary>
            <remarks>
            <para>
            This <see cref="T:Autofac.Module"/> is primarily used during
            application startup (in <c>Global.asax</c>) to register
            mappings from commonly referenced contextual application properties
            to their corresponding abstraction.
            </para>
            <para>
            The following mappings are made:
            </para>
            <list type="table">
            <listheader>
            <term>Common Construct</term>
            <description>Abstraction</description>
            </listheader>
            <item>
            <term><c>HttpContext.Current</c></term>
            <description><see cref="T:System.Web.HttpContextBase"/></description>
            </item>
            <item>
            <term><c>HttpContext.Current.Application</c></term>
            <description><see cref="T:System.Web.HttpApplicationStateBase"/></description>
            </item>
            <item>
            <term><c>HttpContext.Current.Request</c></term>
            <description><see cref="T:System.Web.HttpRequestBase"/></description>
            </item>
            <item>
            <term><c>HttpContext.Current.Request.Browser</c></term>
            <description><see cref="T:System.Web.HttpBrowserCapabilitiesBase"/></description>
            </item>
            <item>
            <term><c>HttpContext.Current.Request.Files</c></term>
            <description><see cref="T:System.Web.HttpFileCollectionBase"/></description>
            </item>
            <item>
            <term><c>HttpContext.Current.Request.RequestContext</c></term>
            <description><see cref="T:System.Web.Routing.RequestContext"/></description>
            </item>
            <item>
            <term><c>HttpContext.Current.Response</c></term>
            <description><see cref="T:System.Web.HttpResponseBase"/></description>
            </item>
            <item>
            <term><c>HttpContext.Current.Response.Cache</c></term>
            <description><see cref="T:System.Web.HttpCachePolicyBase"/></description>
            </item>
            <item>
            <term><c>HttpContext.Current.Server</c></term>
            <description><see cref="T:System.Web.HttpServerUtilityBase"/></description>
            </item>
            <item>
            <term><c>HttpContext.Current.Session</c></term>
            <description><see cref="T:System.Web.HttpSessionStateBase"/></description>
            </item>
            <item>
            <term><c>HostingEnvironment.VirtualPathProvider</c></term>
            <description><see cref="T:System.Web.Hosting.VirtualPathProvider"/></description>
            </item>
            </list>
            <para>
            In addition, the <see cref="T:System.Web.Mvc.UrlHelper"/> type is registered
            for construction based on the current <see cref="T:System.Web.Routing.RequestContext"/>.
            </para>
            <para>
            The lifetime for each of these items is one web request.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Integration.Mvc.AutofacWebTypesModule.Load(Autofac.ContainerBuilder)">
            <summary>
            Registers web abstractions with dependency injection.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> in which registration
            should take place.
            </param>
            <remarks>
            <para>
            This method registers mappings between common current context-related
            web constructs and their associated abstract counterparts. See
            <see cref="T:Autofac.Integration.Mvc.AutofacWebTypesModule"/> for the complete
            list of mappings that get registered.
            </para>
            </remarks>
        </member>
        <member name="T:Autofac.Integration.Mvc.FilterMetadata">
            <summary>
            Metadata interface for filter registrations.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.FilterMetadata.ControllerType">
            <summary>
            Gets the type of the controller.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.FilterMetadata.FilterScope">
            <summary>
            Gets the filter scope.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.FilterMetadata.MethodInfo">
            <summary>
            Gets the method info.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.FilterMetadata.Order">
            <summary>
            Gets the order in which the filter is applied.
            </summary>
        </member>
        <member name="T:Autofac.Integration.Mvc.RegistrationExtensionsResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.RegistrationExtensionsResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.RegistrationExtensionsResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.RegistrationExtensionsResources.InvalidActionExpress">
            <summary>
              Looks up a localized string similar to The action method Expression is invalid. It should consist only of a Method call to a controller action method..
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.RegistrationExtensionsResources.InvalidModelBinderType">
            <summary>
              Looks up a localized string similar to Type list may not be empty or contain all null values..
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.RegistrationExtensionsResources.MustBeAssignableToFilterType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; must be assignable to the filter type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="T:Autofac.Integration.Mvc.RequestLifetimeScopeProvider">
            <summary>
            Creates and disposes HTTP request based lifetime scopes.
            </summary>
            <remarks>
            The provider is notified when a HTTP request ends by the <see cref="T:Autofac.Integration.Mvc.RequestLifetimeHttpModule"/>.
            </remarks>
        </member>
        <member name="T:Autofac.Integration.Mvc.ILifetimeScopeProvider">
            <summary>
            Implementors are able to control the creation of nested lifetime scopes.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Mvc.ILifetimeScopeProvider.GetLifetimeScope(System.Action{Autofac.ContainerBuilder})">
            <summary>
            Gets a nested lifetime scope that services can be resolved from.
            </summary>
            <param name="configurationAction">
            A configuration action that will execute during lifetime scope creation.
            </param>
            <returns>A new or existing nested lifetime scope.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.ILifetimeScopeProvider.EndLifetimeScope">
            <summary>
            Ends the current lifetime scope.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.ILifetimeScopeProvider.ApplicationContainer">
            <summary>
            Gets the global, application-wide container.
            </summary>
        </member>
        <member name="F:Autofac.Integration.Mvc.RequestLifetimeScopeProvider.HttpRequestTag">
            <summary>
            Tag used to identify registrations that are scoped to the HTTP request level.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Mvc.RequestLifetimeScopeProvider.#ctor(Autofac.ILifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Integration.Mvc.RequestLifetimeScopeProvider"/> class.
            </summary>
            <param name="container">The parent container, usually the application container.</param>
        </member>
        <member name="M:Autofac.Integration.Mvc.RequestLifetimeScopeProvider.GetLifetimeScope(System.Action{Autofac.ContainerBuilder})">
            <summary>
            Gets a nested lifetime scope that services can be resolved from.
            </summary>
            <param name="configurationAction">
            A configuration action that will execute during lifetime scope creation.
            </param>
            <returns>A new or existing nested lifetime scope.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.RequestLifetimeScopeProvider.EndLifetimeScope">
            <summary>
            Ends the current HTTP request lifetime scope.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Mvc.RequestLifetimeScopeProvider.GetLifetimeScopeCore(System.Action{Autofac.ContainerBuilder})">
            <summary>
            Gets a lifetime scope for the current HTTP request. This method can be overridden
            to alter the way that the life time scope is constructed.
            </summary>
            <param name="configurationAction">
            A configuration action that will execute during lifetime scope creation.
            </param>
            <returns>A new lifetime scope for the current HTTP request.</returns>
        </member>
        <member name="P:Autofac.Integration.Mvc.RequestLifetimeScopeProvider.ApplicationContainer">
            <summary>
            Gets the global, application-wide container.
            </summary>
        </member>
        <member name="T:Autofac.Integration.Mvc.ExtensibleActionInvoker">
            <summary>
            Injects services from the container into the ASP.NET MVC invocation pipeline.
            This is a Async Controller Action Invoker which can be used for both async and non-async scenarios
            </summary>
            <remarks>
            <para>
            Action methods can include parameters that will be resolved from the
            container, along with regular parameters.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Integration.Mvc.ExtensibleActionInvoker.GetParameterValue(System.Web.Mvc.ControllerContext,System.Web.Mvc.ParameterDescriptor)">
            <summary>
            Gets the parameter value.
            </summary>
            <param name="controllerContext">The controller context.</param><param name="parameterDescriptor">The parameter descriptor.</param>
            <returns>
            The parameter value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="parameterDescriptor"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Autofac.Integration.Mvc.ModelBinderTypeAttribute">
            <summary>
            Indicates what types a model binder supports.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Mvc.ModelBinderTypeAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Integration.Mvc.ModelBinderTypeAttribute"/> class.
            </summary>
            <param name="targetTypes">The target types.</param>
        </member>
        <member name="M:Autofac.Integration.Mvc.ModelBinderTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Integration.Mvc.ModelBinderTypeAttribute"/> class.
            </summary>
            <param name="targetType">The target type.</param>
        </member>
        <member name="P:Autofac.Integration.Mvc.ModelBinderTypeAttribute.TargetTypes">
            <summary>
            Gets the target types.
            </summary>
        </member>
        <member name="T:Autofac.Integration.Mvc.PreApplicationStartCode">
            <summary>
            Container class for the ASP.NET application startup method.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Mvc.PreApplicationStartCode.Start">
            <summary>
            Performs ASP.NET application startup logic early in the pipeline.
            </summary>
        </member>
        <member name="T:Autofac.Integration.Mvc.RegistrationExtensions">
            <summary>
            Extends <see cref="T:Autofac.ContainerBuilder"/> with methods to support ASP.NET MVC.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.InstancePerHttpRequest``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Object[])">
            <summary>
            Share one instance of the component within the context of a single
            HTTP request.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <param name="registration">The registration to configure.</param>
            <param name="lifetimeScopeTags">Additional tags applied for matching lifetime scopes.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.RegisterControllers(Autofac.ContainerBuilder,System.Reflection.Assembly[])">
            <summary>
            Register types that implement IController in the provided assemblies.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="controllerAssemblies">Assemblies to scan for controllers.</param>
            <returns>Registration builder allowing the controller components to be customised.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.InjectActionInvoker``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Inject an IActionInvoker into the controller's ActionInvoker property.
            </summary>
            <typeparam name="TLimit">Limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registrationBuilder">The registration builder.</param>
            <returns>A registration builder.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.InjectActionInvoker``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Service)">
            <summary>
            Inject an IActionInvoker into the controller's ActionInvoker property.
            </summary>
            <typeparam name="TLimit">Limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registrationBuilder">The registration builder.</param>
            <param name="actionInvokerService">Service used to resolve the action invoker.</param>
            <returns>A registration builder.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.RegisterModelBinderProvider(Autofac.ContainerBuilder)">
            <summary>
            Registers the <see cref="T:Autofac.Integration.Mvc.AutofacModelBinderProvider"/>.
            </summary>
            <param name="builder">The container builder.</param>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.AsModelBinderForTypes``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type[])">
            <summary>
            Sets a provided registration to act as an <see cref="T:System.Web.Mvc.IModelBinder"/>
            for the specified list of types.
            </summary>
            <param name="registration">
            The registration for the type or object instance that will act as
            the model binder.
            </param>
            <param name="types">
            The list of model <see cref="T:System.Type"/> for which the <paramref name="registration"/>
            should be a model binder.
            </param>
            <typeparam name="TLimit">
            Registration limit type.
            </typeparam>
            <typeparam name="TActivatorData">
            Activator data type.
            </typeparam>
            <typeparam name="TRegistrationStyle">
            Registration style.
            </typeparam>
            <returns>
            An Autofac registration that can be modified as needed.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registration"/> or <paramref name="types"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="types"/> is empty or contains all <see langword="null"/>
            values.
            </exception>
            <remarks>
            <para>
            The declarative mechanism of registering model binders with Autofac
            is through use of <see cref="M:Autofac.Integration.Mvc.RegistrationExtensions.RegisterModelBinders(Autofac.ContainerBuilder,System.Reflection.Assembly[])"/>
            and the <see cref="T:Autofac.Integration.Mvc.ModelBinderTypeAttribute"/>.
            This method is an imperative alternative.
            </para>
            <para>
            The two mechanisms are mutually exclusive. If you register a model
            binder using <see cref="M:Autofac.Integration.Mvc.RegistrationExtensions.RegisterModelBinders(Autofac.ContainerBuilder,System.Reflection.Assembly[])"/>
            and register the same model binder with this method, the results
            are not automatically merged together - standard dependency
            registration/resolution rules will be used to manage the conflict.
            </para>
            <para>
            Any <see langword="null"/> values provided in <paramref name="types"/>
            will be removed prior to registration.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.RegisterModelBinders(Autofac.ContainerBuilder,System.Reflection.Assembly[])">
            <summary>
            Register types that implement <see cref="T:System.Web.Mvc.IModelBinder"/> in the provided assemblies
            and have a <see cref="T:Autofac.Integration.Mvc.ModelBinderTypeAttribute"/>.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="modelBinderAssemblies">Assemblies to scan for model binders.</param>
            <returns>A registration builder.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder"/> or <paramref name="modelBinderAssemblies"/> is <see langword="null"/>.
            </exception>
            <remarks>
            <para>
            The declarative mechanism of registering model binders with Autofac
            is through use of this method and the
            <see cref="T:Autofac.Integration.Mvc.ModelBinderTypeAttribute"/>.
            If you would like more imperative control over registration for your
            model binders, see the <see cref="M:Autofac.Integration.Mvc.RegistrationExtensions.AsModelBinderForTypes``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type[])"/>
            method.
            </para>
            <para>
            The two mechanisms are mutually exclusive. If you register a model
            binder using <see cref="M:Autofac.Integration.Mvc.RegistrationExtensions.AsModelBinderForTypes``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type[])"/>
            and register the same model binder with this method, the results
            are not automatically merged together - standard dependency
            registration/resolution rules will be used to manage the conflict.
            </para>
            <para>
            This method only registers types that implement <see cref="T:System.Web.Mvc.IModelBinder"/>
            and are marked with the <see cref="T:Autofac.Integration.Mvc.ModelBinderTypeAttribute"/>.
            The model binder must have the attribute because the
            <see cref="T:Autofac.Integration.Mvc.AutofacModelBinderProvider"/> uses
            the associated metadata - from the attribute(s) - to resolve the
            binder based on model type. If there aren't any attributes, there
            won't be any metadata, so the model binder will be technically
            registered but will never actually be resolved.
            </para>
            <para>
            If your model is not marked with the attribute, or if you don't want
            to use attributes, use the
            <see cref="M:Autofac.Integration.Mvc.RegistrationExtensions.AsModelBinderForTypes``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type[])"/>
            extension instead.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.RegisterFilterProvider(Autofac.ContainerBuilder)">
            <summary>
            Registers the <see cref="T:Autofac.Integration.Mvc.AutofacFilterProvider"/>.
            </summary>
            <param name="builder">The container builder.</param>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.CacheInSession``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Cache instances in the web session. This implies external ownership (disposal is not
            available.) All dependencies must also have external ownership.
            </summary>
            <remarks>
            It is strongly recommended that components cached per-session do not take dependencies on
            other services.
            </remarks>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <param name="registration">The registration to configure.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.AsActionFilterFor``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Builder.IConcreteActivatorData,Autofac.Builder.SingleRegistrationStyle},System.Linq.Expressions.Expression{System.Action{``0}},System.Int32)">
            <summary>
            Sets the provided registration to act as an <see cref="T:System.Web.Mvc.IActionFilter"/> for the specified controller action.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="registration">The registration.</param>
            <param name="actionSelector">The action selector.</param>
            <param name="order">The order in which the filter is applied.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.AsActionFilterFor``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Builder.IConcreteActivatorData,Autofac.Builder.SingleRegistrationStyle},System.Int32)">
            <summary>
            Sets the provided registration to act as an <see cref="T:System.Web.Mvc.IActionFilter"/> for the specified controller.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="registration">The registration.</param>
            <param name="order">The order in which the filter is applied.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.AsAuthorizationFilterFor``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Builder.IConcreteActivatorData,Autofac.Builder.SingleRegistrationStyle},System.Linq.Expressions.Expression{System.Action{``0}},System.Int32)">
            <summary>
            Sets the provided registration to act as an <see cref="T:System.Web.Mvc.IAuthorizationFilter"/> for the specified controller action.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="registration">The registration.</param>
            <param name="actionSelector">The action selector.</param>
            <param name="order">The order in which the filter is applied.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.AsAuthorizationFilterFor``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Builder.IConcreteActivatorData,Autofac.Builder.SingleRegistrationStyle},System.Int32)">
            <summary>
            Sets the provided registration to act as an <see cref="T:System.Web.Mvc.IAuthorizationFilter"/> for the specified controller.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="registration">The registration.</param>
            <param name="order">The order in which the filter is applied.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.AsExceptionFilterFor``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Builder.IConcreteActivatorData,Autofac.Builder.SingleRegistrationStyle},System.Linq.Expressions.Expression{System.Action{``0}},System.Int32)">
            <summary>
            Sets the provided registration to act as an <see cref="T:System.Web.Mvc.IExceptionFilter"/> for the specified controller action.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="registration">The registration.</param>
            <param name="actionSelector">The action selector.</param>
            <param name="order">The order in which the filter is applied.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.AsExceptionFilterFor``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Builder.IConcreteActivatorData,Autofac.Builder.SingleRegistrationStyle},System.Int32)">
            <summary>
            Sets the provided registration to act as an <see cref="T:System.Web.Mvc.IExceptionFilter"/> for the specified controller.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="registration">The registration.</param>
            <param name="order">The order in which the filter is applied.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.AsResultFilterFor``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Builder.IConcreteActivatorData,Autofac.Builder.SingleRegistrationStyle},System.Linq.Expressions.Expression{System.Action{``0}},System.Int32)">
            <summary>
            Sets the provided registration to act as an <see cref="T:System.Web.Mvc.IResultFilter"/> for the specified controller action.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="registration">The registration.</param>
            <param name="actionSelector">The action selector.</param>
            <param name="order">The order in which the filter is applied.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Integration.Mvc.RegistrationExtensions.AsResultFilterFor``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Builder.IConcreteActivatorData,Autofac.Builder.SingleRegistrationStyle},System.Int32)">
            <summary>
            Sets the provided registration to act as an <see cref="T:System.Web.Mvc.IResultFilter"/> for the specified controller.
            </summary>
            <typeparam name="TController">The type of the controller.</typeparam>
            <param name="registration">The registration.</param>
            <param name="order">The order in which the filter is applied.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="T:Autofac.Integration.Mvc.RequestLifetimeHttpModule">
            <summary>
            An <see cref="T:System.Web.IHttpModule"/> and <see cref="T:Autofac.Integration.Mvc.ILifetimeScopeProvider"/> implementation 
            that creates a nested lifetime scope for each HTTP request.
            </summary>
        </member>
        <member name="M:Autofac.Integration.Mvc.RequestLifetimeHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the 
            methods, properties, and events common to all application objects within an ASP.NET application</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Autofac.Integration.Mvc.RequestLifetimeHttpModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.RequestLifetimeHttpModule.LifetimeScopeProvider">
            <summary>
            Gets the lifetime scope provider that should be notified when a HTTP request ends.
            </summary>
        </member>
        <member name="T:Autofac.Integration.Mvc.RequestLifetimeScopeProviderResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.RequestLifetimeScopeProviderResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.RequestLifetimeScopeProviderResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.RequestLifetimeScopeProviderResources.HttpContextNotAvailable">
            <summary>
              Looks up a localized string similar to The request lifetime scope cannot be created because the HttpContext is not available..
            </summary>
        </member>
        <member name="P:Autofac.Integration.Mvc.RequestLifetimeScopeProviderResources.NullLifetimeScopeReturned">
            <summary>
              Looks up a localized string similar to The &apos;GetLifetimeScopeCore&apos; method implementation on &apos;{0}&apos; returned a null ILifetimeScope instance. When overridden this method must return a valid ILifetimeScope instance for the current HTTP request..
            </summary>
        </member>
        <member name="T:Autofac.Integration.Mvc.ViewRegistrationSource">
            <summary>
            A registration source for building view registrations.
            </summary>
            <remarks>
            Supports view registrations for <see cref="T:System.Web.Mvc.WebViewPage"/>, <see cref="T:System.Web.Mvc.ViewPage"/>, 
            <see cref="T:System.Web.Mvc.ViewMasterPage"/> and <see cref="T:System.Web.Mvc.ViewUserControl"/> derived types.
            </remarks>
        </member>
        <member name="M:Autofac.Integration.Mvc.ViewRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
        </member>
        <member name="P:Autofac.Integration.Mvc.ViewRegistrationSource.IsAdapterForIndividualComponents">
            <summary>
            Gets whether the registrations provided by this source are 1:1 adapters on top
            of other components (I.e. like Meta, Func or Owned.)
            </summary>
        </member>
    </members>
</doc>
