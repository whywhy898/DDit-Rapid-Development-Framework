<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework.SqlServer</name>
  </assembly>
  <members>
    <member name="T:System.Data.Entity.SqlServer.SqlAzureExecutionStrategy">
      <summary>一个 <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />，它重试引发 SQL Azure 瞬态错误导致的异常的操作。</summary>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlAzureExecutionStrategy.#ctor">
      <summary>创建 <see cref="T:System.Data.Entity.SqlServer.SqlAzureExecutionStrategy" /> 的新实例。</summary>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlAzureExecutionStrategy.#ctor(System.Int32,System.TimeSpan)">
      <summary>使用指定的重试次数限制值和两次重试之间的延迟时间创建 <see cref="T:System.Data.Entity.SqlServer.SqlAzureExecutionStrategy" /> 类的新实例。</summary>
      <param name="maxRetryCount">最大重试次数。</param>
      <param name="maxDelay">两次重试之间的最大延迟时间（毫秒）。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlAzureExecutionStrategy.ShouldRetryOn(System.Exception)">
      <summary>确定在出现指定的异常时是否应重试。</summary>
      <returns>如果在出现指定的异常时应重试，则为 true；否则为 false。</returns>
      <param name="exception">要重试的异常。</param>
    </member>
    <member name="T:System.Data.Entity.SqlServer.SqlFunctions">
      <summary>包含在 Linq to Entities 中公开 SqlServer 方法的函数存根。</summary>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Acos(System.Nullable{System.Decimal})">
      <summary>一个数学函数，该函数返回其余弦为指定数值的角（以弧度表示）。此角称作反余弦。</summary>
      <returns>以弧度计量的角度。</returns>
      <param name="arg1">角的余弦。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Acos(System.Nullable{System.Double})">
      <summary>一个数学函数，该函数返回其余弦为指定数值的角（以弧度表示）。此角称作反余弦。</summary>
      <returns>由输入余弦值定义的角，以弧度表示。</returns>
      <param name="arg1">角的余弦。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Ascii(System.String)">
      <summary>返回字符表达式中最左侧字符的 ASCII 代码值。</summary>
      <returns>输入字符串中第一个字符的 ASCII 代码。</returns>
      <param name="arg">一个有效的字符串。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Asin(System.Nullable{System.Decimal})">
      <summary>一个数学函数，该函数返回其正弦为指定数值的角（以弧度表示）。此角称作反正弦。</summary>
      <returns>以弧度计量的角度。</returns>
      <param name="arg">角的正弦。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Asin(System.Nullable{System.Double})">
      <summary>一个数学函数，该函数返回其正弦为指定数值的角（以弧度表示）。此角称作反正弦。</summary>
      <returns>以弧度计量的角度。</returns>
      <param name="arg">角的正弦。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Atan(System.Nullable{System.Decimal})">
      <summary>一个数学函数，该函数返回其正切为指定数值的角（以弧度表示）。此角称作反正切。</summary>
      <returns>以弧度计量的角度。</returns>
      <param name="arg">角的正切。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Atan(System.Nullable{System.Double})">
      <summary>一个数学函数，该函数返回其正切为指定数值的角（以弧度表示）。此角称作反正切。</summary>
      <returns>以弧度计量的角度。</returns>
      <param name="arg">角的正切。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Atan2(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>返回以弧度表示的正角，该角由正 x 轴和从原点到点 (x, y) 的射线构成，其中 x 和 y 是两个指定的数值。传递给函数的第一个参数和第二参数分别为 y 值和 x 值。</summary>
      <returns>以弧度计量的角度。</returns>
      <param name="arg1">点的 y 坐标。</param>
      <param name="arg2">点的 x 坐标。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Atan2(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>返回以弧度表示的正角，该角由正 x 轴和从原点到点 (x, y) 的射线构成，其中 x 和 y 是两个指定的数值。传递给函数的第一个参数和第二参数分别为 y 值和 x 值。</summary>
      <returns>以弧度计量的角度。</returns>
      <param name="arg1">点的 y 坐标。</param>
      <param name="arg2">点的 x 坐标。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Char(System.Nullable{System.Int32})">
      <summary>返回与指定的整数 ASCII 值相对应的字符。</summary>
      <returns>与指定的 ASCII 值相对应的字符。</returns>
      <param name="arg">ASCII 代码。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.CharIndex(System.Byte[],System.Byte[])">
      <summary>返回在一个表达式中找到的另一个表达式的起始位置。</summary>
      <returns>目标的起始位置（如果在 toSearch 中找到）。</returns>
      <param name="toSearch">要在其中搜索的字符串表达式。</param>
      <param name="target">要查找的字符串表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int32})">
      <summary>返回在一个表达式中找到的另一个表达式的起始位置。</summary>
      <returns>目标的起始位置（如果在 toSearch 中找到）。</returns>
      <param name="toSearch">要在其中搜索的字符串表达式。</param>
      <param name="target">要查找的字符串表达式。</param>
      <param name="startLocation">搜索开始的 toSearch 中的字符位置。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int64})">
      <summary>返回在一个表达式中找到的另一个表达式的起始位置。</summary>
      <returns>目标的起始位置（如果在 toSearch 中找到）。</returns>
      <param name="toSearch">要在其中搜索的字符串表达式。</param>
      <param name="target">要查找的字符串表达式。</param>
      <param name="startLocation">toSearch 中在其开始搜索的字符位置。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.CharIndex(System.String,System.String)">
      <summary>返回在一个表达式中找到的另一个表达式的起始位置。</summary>
      <returns>目标的起始位置（如果在 toSearch 中找到）。</returns>
      <param name="toSearch">要在其中搜索的字符串表达式。</param>
      <param name="target">要查找的字符串表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int32})">
      <summary>返回在一个表达式中找到的另一个表达式的起始位置。</summary>
      <returns>目标的起始位置（如果在 toSearch 中找到）。</returns>
      <param name="toSearch">要在其中搜索的字符串表达式。</param>
      <param name="target">要查找的字符串表达式。</param>
      <param name="startLocation">搜索开始的 toSearch 中的字符位置。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int64})">
      <summary>返回在一个表达式中找到的另一个表达式的起始位置。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值的 <see cref="T:System.Nullable`1" />，该值是目标的起始位置（如果在 toSearch 中找到）。</returns>
      <param name="toSearch">要在其中搜索的字符串表达式。</param>
      <param name="target">要查找的字符串表达式。</param>
      <param name="startLocation">搜索开始的 toSearch 中的字符位置。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Byte[])">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">为其计算校验和的字符数组。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Byte[],System.Byte[])">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">为其计算校验和的字符数组。</param>
      <param name="arg2">为其计算校验和的字符数组。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Byte[],System.Byte[],System.Byte[])">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">为其计算校验和的字符数组。</param>
      <param name="arg2">为其计算校验和的字符数组。</param>
      <param name="arg3">为其计算校验和的字符数组。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.Boolean})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.DateTime})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.Decimal})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.Double})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.Guid})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.TimeSpan})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.String)">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.String,System.String)">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Checksum(System.String,System.String,System.String)">
      <summary>返回基于输入参数计算出的校验和值。</summary>
      <returns>基于输入值计算出的校验和。</returns>
      <param name="arg1">要为其计算校验和的值。</param>
      <param name="arg2">要为其计算校验和的值。</param>
      <param name="arg3">要为其计算校验和的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>返回集合中各值的校验和。Null 值将被忽略。</summary>
      <returns>基于输入集合计算出的校验和。</returns>
      <param name="arg">对其计算校验和的各值的集合。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>返回集合中各值的校验和。Null 值将被忽略。</summary>
      <returns>基于输入集合计算出的校验和。</returns>
      <param name="arg">对其计算校验和的各值的集合。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Cos(System.Nullable{System.Decimal})">
      <summary>返回指定表达式中指定角（以弧度表示）的三角余弦。</summary>
      <returns>指定角的三角余弦。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Cos(System.Nullable{System.Double})">
      <summary>返回指定表达式中指定角（以弧度表示）的三角余弦。</summary>
      <returns>指定角的三角余弦。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Cot(System.Nullable{System.Decimal})">
      <summary>一个数学函数，该函数返回指定角（以弧度表示）的三角余切。</summary>
      <returns>指定角的三角余切。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Cot(System.Nullable{System.Double})">
      <summary>一个数学函数，该函数返回指定角（以弧度表示）的三角余切。</summary>
      <returns>指定角的三角余切。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.CurrentTimestamp">
      <summary>返回当前日期和时间。</summary>
      <returns>当前日期和时间。</returns>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.CurrentUser">
      <summary>返回当前用户的名称。</summary>
      <returns>当前用户的名称。</returns>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DataLength(System.Byte[])">
      <summary>返回用于表示任何表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其长度的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DataLength(System.Nullable{System.Boolean})">
      <summary>返回用于表示任何表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DataLength(System.Nullable{System.DateTime})">
      <summary>返回用于表示任何表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DataLength(System.Nullable{System.DateTimeOffset})">
      <summary>返回用于表示任何表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DataLength(System.Nullable{System.Decimal})">
      <summary>返回用于表示任何表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DataLength(System.Nullable{System.Double})">
      <summary>返回用于表示任何表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DataLength(System.Nullable{System.Guid})">
      <summary>返回用于表示任何表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DataLength(System.Nullable{System.TimeSpan})">
      <summary>返回用于表示任何表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DataLength(System.String)">
      <summary>返回用于表示任何表达式的字节数。</summary>
      <returns>输入值中的字节数。</returns>
      <param name="arg">要检查其数据长度的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>向指定的日期添加间隔，以此返回新的日期时间值。</summary>
      <returns>新的日期。</returns>
      <param name="datePartArg">要递增的日期部分。</param>
      <param name="number">用于按指定量递增日期的值。</param>
      <param name="date">要递增的日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTimeOffset})">
      <summary>向指定的日期添加间隔，以此返回新的日期值。</summary>
      <returns>相对于协调世界时 (UTC) 的新时间点，以日期和时间来表示。</returns>
      <param name="datePartArg">要递增的日期部分。</param>
      <param name="number">用于按指定量递增日期的值。</param>
      <param name="dateTimeOffsetArg">要递增的日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.TimeSpan})">
      <summary>向指定的时间跨度添加间隔，以此返回新的时间跨度值。</summary>
      <returns>新的时间跨度。</returns>
      <param name="datePartArg">要递增的日期部分。</param>
      <param name="number">用于按指定量递增日期的值。</param>
      <param name="time">要递增的时间跨度。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.String)">
      <summary>向指定的日期添加间隔，以此返回新的日期时间值。</summary>
      <returns>表示新日期的 <see cref="T:System.DateTime" /> 值的 <see cref="T:System.Nullable`1" />。</returns>
      <param name="datePartArg">要递增的日期部分。</param>
      <param name="number">用于按指定量递增日期的值。</param>
      <param name="date">要递增的日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTimeOffset})">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan})">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.String)">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTime})">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.TimeSpan})">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.String)">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTimeOffset})">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.String)">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTime})">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTimeOffset})">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.TimeSpan})">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>指定两个日期之间的时间间隔数的值。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateDiff(System.String,System.String,System.String)">
      <summary>返回所指定开始日期和结束日期之间的指定日期部分边界的计数。</summary>
      <returns>两个日期之间的时间间隔数。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="startDate">第一个日期。</param>
      <param name="endDate">第二个日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateName(System.String,System.Nullable{System.DateTime})">
      <summary>返回一个字符串，该字符串表示指定日期的指定日期部分。</summary>
      <returns>指定日期的指定部分。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateName(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>返回一个字符串，该字符串表示指定日期的指定日期部分。</summary>
      <returns>指定日期的指定部分。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateName(System.String,System.Nullable{System.TimeSpan})">
      <summary>返回一个字符串，该字符串表示指定日期的指定日期部分。</summary>
      <returns>指定日期的指定部分。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DateName(System.String,System.String)">
      <summary>返回一个字符串，该字符串表示指定日期的指定日期部分。</summary>
      <returns>指定日期的指定部分。</returns>
      <param name="datePartArg">要计算时间间隔差值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTime})">
      <summary>返回表示指定日期的指定日期部分的整数。</summary>
      <returns>指定日期的指定日期部分。</returns>
      <param name="datePartArg">要返回值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>返回表示指定日期的指定日期部分的整数。</summary>
      <returns>指定日期的指定日期部分。</returns>
      <param name="datePartArg">要返回值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DatePart(System.String,System.Nullable{System.TimeSpan})">
      <summary>返回表示指定日期的指定日期部分的整数。</summary>
      <returns>指定日期的指定日期部分。</returns>
      <param name="datePartArg">要返回值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.DatePart(System.String,System.String)">
      <summary>返回表示指定日期的指定日期部分的整数。</summary>
      <returns>指定日期的指定日期部分。</returns>
      <param name="datePartArg">要返回值的日期部分。</param>
      <param name="date">日期。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Degrees(System.Nullable{System.Decimal})">
      <summary>为以弧度指定的角返回对应的以度数表示的角。</summary>
      <returns>转换为度数的指定角。</returns>
      <param name="arg1">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Degrees(System.Nullable{System.Double})">
      <summary>为以弧度指定的角返回对应的以度数表示的角。</summary>
      <returns>转换为度数的指定角。</returns>
      <param name="arg1">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Degrees(System.Nullable{System.Int32})">
      <summary>为以弧度指定的角返回对应的以度数表示的角。</summary>
      <returns>转换为度数的指定角。</returns>
      <param name="arg1">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Degrees(System.Nullable{System.Int64})">
      <summary>为以弧度指定的角返回对应的以度数表示的角。</summary>
      <returns>转换为度数的指定角。</returns>
      <param name="arg1">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Difference(System.String,System.String)">
      <summary>返回指示两个字符表达式的 SOUNDEX 值之差的整数值。</summary>
      <returns>两个字符串之间的 SOUNDEX 差值。</returns>
      <param name="string1">第一个字符串。</param>
      <param name="string2">第二个字符串。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Exp(System.Nullable{System.Decimal})">
      <summary>返回所指定浮点表达式的指数值。</summary>
      <returns>以常数 e 为底、以输入值为指数的幂。</returns>
      <param name="arg">输入值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Exp(System.Nullable{System.Double})">
      <summary>返回所指定浮点表达式的指数值。</summary>
      <returns>以常数 e 为底、以输入值为指数的幂。</returns>
      <param name="arg">输入值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.GetDate">
      <summary>将当前数据库系统时间戳作为日期时间值返回，不含数据库时区偏移量。此值派生自运行 SQL Server 实例的计算机上使用的操作系统。</summary>
      <returns>当前的数据库时间戳。</returns>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.GetUtcDate">
      <summary>将当前数据库系统时间戳作为日期时间值返回。不包含数据库时区偏移量。此值表示当前 UTC 时间（协调世界时）。此值派生自运行 SQL Server 实例的计算机上使用的操作系统。</summary>
      <returns>当前的数据库 UTC 时间戳。</returns>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.HostName">
      <summary>返回工作站名称。</summary>
      <returns>工作站的名称。</returns>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.IsDate(System.String)">
      <summary>指示输入值是否为有效的日期或时间。</summary>
      <returns>如果输入表达式是 datetime 或 smalldatetime 数据类型的有效日期或时间值，则为 1；否则为 0。</returns>
      <param name="arg">所测试的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.IsNumeric(System.String)">
      <summary>指示输入值是否为有效的数值类型。</summary>
      <returns>如果输入表达式是有效的数值类型，则为 1；否则为 0。</returns>
      <param name="arg">字符串表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Log(System.Nullable{System.Decimal})">
      <summary>返回所指定输入值的自然对数。</summary>
      <returns>输入值的自然对数。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Log(System.Nullable{System.Double})">
      <summary>返回所指定输入值的自然对数。</summary>
      <returns>输入值的自然对数。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Log10(System.Nullable{System.Decimal})">
      <summary>返回所指定输入值以 10 为底的对数。</summary>
      <returns>输入值的以 10 为底的对数。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Log10(System.Nullable{System.Double})">
      <summary>返回所指定输入值以 10 为底的对数。</summary>
      <returns>输入值的以 10 为底的对数。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.NChar(System.Nullable{System.Int32})">
      <summary>根据 Unicode 标准的定义，返回具有所指定整数代码的 Unicode 字符。</summary>
      <returns>与输入字符代码相对应的字符。</returns>
      <param name="arg">字符代码。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.PatIndex(System.String,System.String)">
      <summary>返回模式在指定表达式中首次出现的起始位置；如果在所有有效的文本和字符数据类型上未找到模式，则为零。</summary>
      <returns>找到字符串模式的起始字符位置。</returns>
      <param name="stringPattern">要搜索的字符串模式。</param>
      <param name="target">要搜索的字符串。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Pi">
      <summary>返回 pi 的常量值。</summary>
      <returns>pi 的数值。</returns>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.QuoteName(System.String)">
      <summary>返回一个 Unicode 字符串，其中添加有分隔符，以使输入字符串成为有效的 Microsoft SQL Server 分隔标识符。</summary>
      <returns>添加有方括号的原始字符串。</returns>
      <param name="stringArg">要将引号字符添加到其中的表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.QuoteName(System.String,System.String)">
      <summary>返回一个 Unicode 字符串，其中添加有分隔符，以使输入字符串成为有效的 Microsoft SQL Server 分隔标识符。</summary>
      <returns>添加有指定引号字符的原始字符串。</returns>
      <param name="stringArg">要将引号字符添加到其中的表达式。</param>
      <param name="quoteCharacter">将用作分隔符的单字符字符串。它可以是单引号 (')、左方括号或右方括号 ([ ]) 或者英文双引号 (")。如果未指定 quote_character，则使用方括号。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Radians(System.Nullable{System.Decimal})">
      <summary>为以度数指定的角返回对应的弧度度量值。</summary>
      <returns>所指定角的弧度度量值。</returns>
      <param name="arg">以度数为单位的角。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Radians(System.Nullable{System.Double})">
      <summary>为以度数指定的角返回对应的弧度度量值。</summary>
      <returns>所指定角的弧度度量值。</returns>
      <param name="arg">以度数为单位的角。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Radians(System.Nullable{System.Int32})">
      <summary>为以度数指定的角返回对应的弧度度量值。</summary>
      <returns>所指定角的弧度度量值。</returns>
      <param name="arg">以度数为单位的角</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Radians(System.Nullable{System.Int64})">
      <summary>为以度数指定的角返回对应的弧度度量值。</summary>
      <returns>所指定角的弧度度量值。</returns>
      <param name="arg">以度数为单位的角</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Rand">
      <summary>返回一个 0 到 1（均不含）之间的伪随机浮点值。</summary>
      <returns>伪随机值。</returns>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Rand(System.Nullable{System.Int32})">
      <summary>返回一个 0 到 1（均不含）之间的伪随机浮点值。</summary>
      <returns>伪随机值。</returns>
      <param name="seed">种子值。如果未指定种子，则 SQL Server 数据库引擎将随机分配种子值。对于指定的种子值，返回的结果始终相同。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Replicate(System.String,System.Nullable{System.Int32})">
      <summary>将一个字符串值重复指定的次数。</summary>
      <returns>重复了由计数所指定的次数的目标字符串。</returns>
      <param name="target">一个有效的字符串。</param>
      <param name="count">指定目标重复多少次的值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Sign(System.Nullable{System.Decimal})">
      <summary>返回指定表达式的正号 (+1)、零 (0) 或负号 (-1)。</summary>
      <returns>输入表达式的符号。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Sign(System.Nullable{System.Double})">
      <summary>返回指定表达式的正号 (+1)、零 (0) 或负号 (-1)。</summary>
      <returns>输入表达式的符号。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Sign(System.Nullable{System.Int32})">
      <summary>返回指定表达式的正号 (+1)、零 (0) 或负号 (-1)。</summary>
      <returns>输入表达式的符号。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Sign(System.Nullable{System.Int64})">
      <summary>返回指定表达式的正号 (+1)、零 (0) 或负号 (-1)。</summary>
      <returns>输入表达式的符号。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Sin(System.Nullable{System.Decimal})">
      <summary>返回所指定角的三角正弦。</summary>
      <returns>输入表达式的三角正弦。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Sin(System.Nullable{System.Double})">
      <summary>返回所指定角的三角正弦。</summary>
      <returns>输入表达式的三角正弦。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.SoundCode(System.String)">
      <summary>将字母数字字符串转换为由四个字符组成的 (SOUNDEX) 代码，以便查找发音相似的字词或名称。</summary>
      <returns>输入字符串的 SOUNDEX 代码。</returns>
      <param name="arg">一个有效的字符串。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Space(System.Nullable{System.Int32})">
      <summary>返回由重复空格组成的字符串。</summary>
      <returns>由指定数量的空格组成的字符串。</returns>
      <param name="arg1">空格数。如果为负，则返回 null 字符串。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Square(System.Nullable{System.Decimal})">
      <summary>返回所指定数字的平方。</summary>
      <returns>输入值的平方。</returns>
      <param name="arg1">数值表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Square(System.Nullable{System.Double})">
      <summary>返回所指定数字的平方。</summary>
      <returns>输入值的平方。</returns>
      <param name="arg1">数值表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.SquareRoot(System.Nullable{System.Decimal})">
      <summary>返回指定数字的平方根。</summary>
      <returns>输入值的平方根。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.SquareRoot(System.Nullable{System.Double})">
      <summary>返回指定数字的平方根。</summary>
      <returns>输入值的平方根。</returns>
      <param name="arg">数值表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.StringConvert(System.Nullable{System.Decimal})">
      <summary>返回从数值数据转换的字符数据。</summary>
      <returns>转换为字符串的输入表达式。</returns>
      <param name="number">数值表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>返回从数值数据转换的字符数据。</summary>
      <returns>转换为字符串的输入表达式。</returns>
      <param name="number">数值表达式。</param>
      <param name="length">字符串的总长度。它包括小数点、符号、数字以及空格。默认值为 10。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>返回从数值数据转换的字符数据。</summary>
      <returns>转换为字符串的输入表达式。</returns>
      <param name="number">数值表达式。</param>
      <param name="length">字符串的总长度。它包括小数点、符号、数字以及空格。默认值为 10。</param>
      <param name="decimalArg">小数点右侧的位数。小数必须小于或等于 16 位。如果小数超过 16 位，则会将结果截断至小数点右侧 16 位。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.StringConvert(System.Nullable{System.Double})">
      <summary>返回从数值数据转换的字符数据。</summary>
      <returns>转换为字符串的数字输入表达式。</returns>
      <param name="number">数值表达式。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>返回从数值数据转换的字符数据。</summary>
      <returns>转换为字符串的数字输入表达式。</returns>
      <param name="number">数值表达式。</param>
      <param name="length">字符串的总长度。它包括小数点、符号、数字以及空格。默认值为 10。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>返回从数值数据转换的字符数据。</summary>
      <returns>转换为字符串的数字输入表达式。</returns>
      <param name="number">数值表达式。</param>
      <param name="length">字符串的总长度。它包括小数点、符号、数字以及空格。默认值为 10。</param>
      <param name="decimalArg">小数点右侧的位数。小数必须小于或等于 16 位。如果小数超过 16 位，则会将结果截断至小数点右侧 16 位。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Stuff(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
      <summary>将一个字符串插入另一个字符串。这会从目标字符串中的起始位置开始，删除指定长度的字符，然后在目标字符串中的起始位置处，插入第二个字符串。</summary>
      <returns>由两个字符串组成的字符串。</returns>
      <param name="stringInput">目标字符串。</param>
      <param name="start">stringinput 中要插入替换字符串的字符位置。</param>
      <param name="length">要从 stringInput 删除的字符数。如果长度比 stringInput 长，则最多删除到 stringReplacement 中的最后一个字符。</param>
      <param name="stringReplacement">要插入 stringInput 中的子字符串。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Tan(System.Nullable{System.Decimal})">
      <summary>返回输入表达式的三角正切。</summary>
      <returns>输入角的正切。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Tan(System.Nullable{System.Double})">
      <summary>返回输入表达式的三角正切。</summary>
      <returns>输入角的正切。</returns>
      <param name="arg">以弧度计量的角度。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.Unicode(System.String)">
      <summary>根据 Unicode 标准的定义，返回输入表达式中第一个字符的整数值。</summary>
      <returns>输入字符串中第一个字符的字符代码。</returns>
      <param name="arg">一个有效的字符串。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.UserName">
      <summary>返回与所指定标识号相对应的数据库用户名。</summary>
      <returns>用户名。</returns>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlFunctions.UserName(System.Nullable{System.Int32})">
      <summary>返回与所指定标识号相对应的数据库用户名。</summary>
      <returns>用户名。</returns>
      <param name="arg">用户 ID。</param>
    </member>
    <member name="T:System.Data.Entity.SqlServer.SqlProviderServices">
      <summary>SQL Server 的 SqlClient 提供程序的 DbProviderServices 实现。</summary>
    </member>
    <member name="P:System.Data.Entity.SqlServer.SqlProviderServices.Instance">
      <summary>SqlProviderServices 类型的单一实例。</summary>
    </member>
    <member name="F:System.Data.Entity.SqlServer.SqlProviderServices.ProviderInvariantName">
      <summary>这是已知的字符串，在配置文件和基于代码的配置中用作“提供程序固定名称”，用于指定 Microsoft SQL Server for ADO.NET 和实体框架提供程序服务。</summary>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlProviderServices.RegisterInfoMessageHandler(System.Data.Common.DbConnection,System.Action{System.String})">
      <summary>注册一个处理程序，以处理来自数据库提供程序的非错误消息。</summary>
      <param name="connection">用来接收信息的连接。</param>
      <param name="handler">用于处理消息的处理程序。</param>
    </member>
    <member name="P:System.Data.Entity.SqlServer.SqlProviderServices.TruncateDecimalsToScale">
      <summary>将该标志设置为 false 可防止 <see cref="T:System.Decimal" /> 值被截断到为列定义的小数位数。默认值为 true，指示将截断小数值，以便避免中断依赖于此行为的现有应用程序。</summary>
    </member>
    <member name="T:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.#ctor"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.BuildColumnType(System.Data.Entity.Migrations.Model.ColumnModel)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.CreateConnection"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Boolean)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Byte[])"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.HistoryOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MigrationOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.UpdateDatabaseOperation)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Spatial.DbGeography)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.DateTime)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.DateTimeOffset)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Guid)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.Object)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.String)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Generate(System.TimeSpan)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.GenerateCreateSchema(System.String)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.GenerateProcedureBody(System.Collections.Generic.ICollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.String,System.String)"></member>
    <member name="P:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.GuidColumnDefault"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Name(System.String)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Quote(System.String)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Statement(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Statement(System.String,System.Boolean,System.String)"></member>
    <member name="M:System.Data.Entity.SqlServer.SqlServerMigrationSqlGenerator.Writer"></member>
    <member name="T:System.Data.Entity.SqlServer.SqlSpatialFunctions">
      <summary>包含在 Linq to Entities 中公开 SqlServer 方法的函数存根。</summary>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.AsTextZM(System.Data.Entity.Spatial.DbGeography)">
      <summary>返回地理实例的开放地理空间信息联盟 (OGC) 已知文本 (WKT) 表示形式，通过实例携带的 Z（海拔）和 M（度量）值扩充该实例。</summary>
      <returns>地理实例的开放地理空间信息联盟 (OGC) 已知文本 (WKT) 表示形式。</returns>
      <param name="geographyValue">地理值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.AsTextZM(System.Data.Entity.Spatial.DbGeometry)">
      <summary>返回地理实例的开放地理空间信息联盟 (OGC) 已知文本 (WKT) 表示形式，通过实例携带的 Z（海拔）和 M（度量）值扩充该实例。</summary>
      <returns>几何实例的开放地理空间信息联盟 (OGC) 已知文本 (WKT) 表示形式。</returns>
      <param name="geometryValue">几何值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.BufferWithTolerance(System.Data.Entity.Spatial.DbGeography,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean})">
      <summary>返回一个几何对象，它表示针对允许的指定公差，与地理实例之间的距离小于或等于指定值的所有点的并集。</summary>
      <returns>与地理实例之间的距离小于或等于指定值的所有点的并集</returns>
      <param name="geographyValue">地理值。</param>
      <param name="distance">距离。</param>
      <param name="tolerance">指定的公差。</param>
      <param name="relative">指定公差值是相对的还是绝对的。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.BufferWithTolerance(System.Data.Entity.Spatial.DbGeometry,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean})">
      <summary>返回一个几何对象，它表示针对允许的指定公差，与几何实例之间的距离小于或等于指定值的所有点的并集。</summary>
      <returns>与几何实例之间的距离小于或等于指定值的所有点的并集。</returns>
      <param name="geometryValue">几何值。</param>
      <param name="distance">距离。</param>
      <param name="tolerance">指定的公差。</param>
      <param name="relative">指定公差值是相对的还是绝对的。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.EnvelopeAngle(System.Data.Entity.Spatial.DbGeography)">
      <summary>返回由 EnvelopeCenter() 返回的点与地理实例的点之间的最大角度（度）。</summary>
      <returns>EnvelopeCenter() 返回的点之间的最大角度。</returns>
      <param name="geographyValue">地理值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.EnvelopeCenter(System.Data.Entity.Spatial.DbGeography)">
      <summary>返回可用作地理实例的边界圆中心的点。</summary>
      <returns>指定边界圆的中心位置的 SqlGeography 值。</returns>
      <param name="geographyValue">地理值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.Filter(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>提供快速的、只对交集编制索引的方法，以确定地理实例是否与另一 SqlGeography 实例相交（假定索引可用）。</summary>
      <returns>如果某一地理实例可能与另一 SqlGeography 实例相交，则为 true；否则为 false。</returns>
      <param name="geographyValue">地理值。</param>
      <param name="geographyOther">要与调用筛选器的实例进行比较的另一地理实例。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.Filter(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>提供快速的、只对交集编制索引的方法，以确定地理实例是否与另一 SqlGeometry 实例相交（假定索引可用）。</summary>
      <returns>如果某一地理实例可能与另一 SqlGeography 实例相交，则为 true；否则为 false。</returns>
      <param name="geometryValue">几何值。</param>
      <param name="geometryOther">要与调用筛选器的实例进行比较的另一地理实例。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.InstanceOf(System.Data.Entity.Spatial.DbGeography,System.String)">
      <summary>测试 SqlGeography 实例是否与指定的类型相同。</summary>
      <returns>一个字符串，它指定在地理类型层次结构中公开的 12 种类型之一。</returns>
      <param name="geographyValue">地理值。</param>
      <param name="geometryTypeName">一个字符串，它指定在地理类型层次结构中公开的 12 种类型之一。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.InstanceOf(System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>测试 SqlGeometry 实例是否与指定的类型相同。</summary>
      <returns>一个字符串，它指定在地理类型层次结构中公开的 12 种类型之一。</returns>
      <param name="geometryValue">几何值。</param>
      <param name="geometryTypeName">一个字符串，它指定在地理类型层次结构中公开的 12 种类型之一。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.MakeValid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>将无效的几何实例转换为具有有效开放地理空间信息联盟 (OGC) 类型的几何实例。</summary>
      <returns>已转换的几何实例。</returns>
      <param name="geometryValue">几何值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.NumRings(System.Data.Entity.Spatial.DbGeography)">
      <summary>返回多边形实例中的总环数。</summary>
      <returns>总环数。</returns>
      <param name="geographyValue">地理值。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.PointGeography(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>构造一个地理实例，它表示来自其 x 和 y 值以及空间引用 ID (SRID) 中的点实例。</summary>
      <returns>构造的地理实例。</returns>
      <param name="latitude">正在生成的点的 x 坐标。</param>
      <param name="longitude">正在生成的点的 y 坐标</param>
      <param name="spatialReferenceId">地理实例的 SRID。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.PointGeometry(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>构造一个几何实例，它表示来自其 x 和 y 值以及空间引用 ID (SRID) 中的点实例。</summary>
      <returns>构造的几何实例。</returns>
      <param name="xCoordinate">正在生成的点的 x 坐标。</param>
      <param name="yCoordinate">正在生成的点的 y 坐标</param>
      <param name="spatialReferenceId">地理实例的 SRID。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.Reduce(System.Data.Entity.Spatial.DbGeography,System.Nullable{System.Double})">
      <summary>返回对具有给定公差的实例运行 Douglas-Peucker 算法而生成的给定地理实例的近似值。</summary>
      <returns>返回 <see cref="T:System.Data.Entity.Spatial.DbGeography" />。</returns>
      <param name="geographyValue">地理值。</param>
      <param name="tolerance">输入到 Douglas-Peucker 算法的公差。公差必须是正数。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.Reduce(System.Data.Entity.Spatial.DbGeometry,System.Nullable{System.Double})">
      <summary>返回对具有给定公差的实例运行 Douglas-Peucker 算法而生成的给定地理实例的近似值。</summary>
      <returns>返回 <see cref="T:System.Data.Entity.Spatial.DbGeometry" />。</returns>
      <param name="geometryValue">几何值。</param>
      <param name="tolerance">输入到 Douglas-Peucker 算法的公差。公差必须是正数。</param>
    </member>
    <member name="M:System.Data.Entity.SqlServer.SqlSpatialFunctions.RingN(System.Data.Entity.Spatial.DbGeography,System.Nullable{System.Int32})">
      <summary>返回 SqlGeography 实例的指定环：1 ≤ n ≤ NumRings()。</summary>
      <returns>表示由 n 指定的环的 SqlGeography 对象。</returns>
      <param name="geographyValue">地理值。</param>
      <param name="index">介于 1 到多边形实例中的环数之间的整数表达式。</param>
    </member>
  </members>
</doc>